package org.bouncycastle.pqc.crypto.qtesla;

import java.security.SecureRandom;
import org.bouncycastle.asn1.cmc.BodyPartID;
import org.bouncycastle.asn1.cmp.PKIFailureInfo;
import org.bouncycastle.crypto.tls.CipherSuite;
import org.bouncycastle.math.ec.Tnaf;
import org.bouncycastle.util.Arrays;
import org.bouncycastle.util.Pack;

class QTesla1p {
    private static int BPLUS1BYTES = 3;
    static final int CRYPTO_BYTES = 2592;
    private static final int CRYPTO_C_BYTES = 32;
    static final int CRYPTO_PUBLICKEYBYTES = 14880;
    private static final int CRYPTO_RANDOMBYTES = 32;
    static final int CRYPTO_SECRETKEYBYTES = 5184;
    private static final int CRYPTO_SEEDBYTES = 32;
    private static final int HM_BYTES = 64;
    private static int NBLOCKS_SHAKE = 56;
    private static final int PARAM_B = 524287;
    private static final int PARAM_BARR_DIV = 30;
    private static final int PARAM_BARR_MULT = 3;
    private static final int PARAM_B_BITS = 19;
    private static final int PARAM_D = 22;
    private static final int PARAM_E = 554;
    private static final int PARAM_GEN_A = 108;
    private static final int PARAM_H = 25;
    private static final int PARAM_K = 4;
    private static final int PARAM_KEYGEN_BOUND_E = 554;
    private static final int PARAM_KEYGEN_BOUND_S = 554;
    private static final int PARAM_N = 1024;
    private static final int PARAM_N_LOG = 10;
    private static final int PARAM_Q = 343576577;
    private static final long PARAM_QINV = 2205847551L;
    private static final int PARAM_Q_LOG = 29;
    private static final int PARAM_R = 172048372;
    private static final int PARAM_R2_INVN = 13632409;
    private static final int PARAM_S = 554;
    private static final double PARAM_SIGMA = 8.5d;
    private static final double PARAM_SIGMA_E = 8.5d;
    private static final int PARAM_S_BITS = 8;
    private static final int RADIX = 32;
    private static final int RADIX32 = 32;
    private static final int maskb1 = 1048575;

    static class Gaussian {
        private static final int CDT_COLS = 2;
        private static final int CDT_ROWS = 78;
        private static final int CHUNK_SIZE = 512;
        private static final long[] cdt_v;

        static {
            long[] jArr = new long[CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256];
            // fill-array-data instruction
            jArr[0] = 0;
            jArr[1] = 0;
            jArr[2] = 100790826;
            jArr[3] = 671507412;
            jArr[4] = 300982266;
            jArr[5] = 372236861;
            jArr[6] = 497060329;
            jArr[7] = 1131554536;
            jArr[8] = 686469725;
            jArr[9] = 80027618;
            jArr[10] = 866922278;
            jArr[11] = 352172656;
            jArr[12] = 1036478428;
            jArr[13] = 1164298592;
            jArr[14] = 1193606242;
            jArr[15] = 860014474;
            jArr[16] = 1337215220;
            jArr[17] = 1378472045;
            jArr[18] = 1466664345;
            jArr[19] = 1948467327;
            jArr[20] = 1581745882;
            jArr[21] = 839957239;
            jArr[22] = 1682648210;
            jArr[23] = 1125857607;
            jArr[24] = 1769902286;
            jArr[25] = 2009293508;
            jArr[26] = 1844317078;
            jArr[27] = 664324558;
            jArr[28] = 1906909508;
            jArr[29] = 1466301668;
            jArr[30] = 1958834133;
            jArr[31] = 506071440;
            jArr[32] = 2001317010;
            jArr[33] = 234057451;
            jArr[34] = 2035597220;
            jArr[35] = 671584905;
            jArr[36] = 2062878330;
            jArr[37] = 786178128;
            jArr[38] = 2084290940;
            jArr[39] = 306011771;
            jArr[40] = 2100866422;
            jArr[41] = 714310105;
            jArr[42] = 2113521119;
            jArr[43] = 243698855;
            jArr[44] = 2123049658;
            jArr[45] = 417712145;
            jArr[46] = 2130125692;
            jArr[47] = 9470578;
            jArr[48] = 2135308229;
            jArr[49] = 1840927014;
            jArr[50] = 2139051783;
            jArr[51] = 1246948843;
            jArr[52] = 2141718732;
            jArr[53] = 589890969;
            jArr[54] = 2143592579;
            jArr[55] = 1774056149;
            jArr[56] = 2144891082;
            jArr[57] = 1109874008;
            jArr[58] = 2145778525;
            jArr[59] = 1056451611;
            jArr[60] = 2146376698;
            jArr[61] = 1812177762;
            jArr[62] = 2146774350;
            jArr[63] = 829172876;
            jArr[64] = 2147035066;
            jArr[65] = 313414831;
            jArr[66] = 2147203651;
            jArr[67] = 1956430050;
            jArr[68] = 2147311165;
            jArr[69] = 1160031633;
            jArr[70] = 2147378788;
            jArr[71] = 1398244789;
            jArr[72] = 2147420737;
            jArr[73] = 187242113;
            jArr[74] = 2147446401;
            jArr[75] = 321666415;
            jArr[76] = 2147461886;
            jArr[77] = 1304194029;
            jArr[78] = 2147471101;
            jArr[79] = 2048797972;
            jArr[80] = 2147476510;
            jArr[81] = 1282326805;
            jArr[82] = 2147479641;
            jArr[83] = 831849416;
            jArr[84] = 2147481428;
            jArr[85] = 1574767936;
            jArr[86] = 2147482435;
            jArr[87] = 194943011;
            jArr[88] = 2147482993;
            jArr[89] = 1991776993;
            jArr[90] = 2147483299;
            jArr[91] = 2120655340;
            jArr[92] = 2147483465;
            jArr[93] = 653713809;
            jArr[94] = 2147483553;
            jArr[95] = 799217300;
            jArr[96] = 2147483599;
            jArr[97] = 1380433609;
            jArr[98] = 2147483623;
            jArr[99] = 1329670087;
            jArr[100] = 2147483635;
            jArr[101] = 1873439229;
            jArr[102] = 2147483642;
            jArr[103] = 103862387;
            jArr[104] = 2147483645;
            jArr[105] = 254367675;
            jArr[106] = 2147483646;
            jArr[107] = 1339200562;
            jArr[108] = 2147483647;
            jArr[109] = 754636301;
            jArr[110] = 2147483647;
            jArr[111] = 1499965744;
            jArr[112] = 2147483647;
            jArr[113] = 1850514943;
            jArr[114] = 2147483647;
            jArr[115] = 2013121736;
            jArr[116] = 2147483647;
            jArr[117] = 2087512222;
            jArr[118] = 2147483647;
            jArr[119] = 2121077103;
            jArr[120] = 2147483647;
            jArr[121] = 2136013361;
            jArr[122] = 2147483647;
            jArr[123] = 2142568585;
            jArr[124] = 2147483647;
            jArr[125] = 2145405997;
            jArr[126] = 2147483647;
            jArr[127] = 2146617281;
            jArr[128] = 2147483647;
            jArr[129] = 2147127267;
            jArr[130] = 2147483647;
            jArr[131] = 2147339035;
            jArr[132] = 2147483647;
            jArr[133] = 2147425762;
            jArr[134] = 2147483647;
            jArr[135] = 2147460791;
            jArr[136] = 2147483647;
            jArr[137] = 2147474745;
            jArr[138] = 2147483647;
            jArr[139] = 2147480227;
            jArr[140] = 2147483647;
            jArr[141] = 2147482351;
            jArr[142] = 2147483647;
            jArr[143] = 2147483163;
            jArr[144] = 2147483647;
            jArr[145] = 2147483469;
            jArr[146] = 2147483647;
            jArr[147] = 2147483583;
            jArr[148] = 2147483647;
            jArr[149] = 2147483625;
            jArr[150] = 2147483647;
            jArr[151] = 2147483640;
            jArr[152] = 2147483647;
            jArr[153] = 2147483645;
            jArr[154] = 2147483647;
            jArr[155] = 2147483647;
            cdt_v = jArr;
        }

        Gaussian() {
        }

        static void sample_gauss_polly(int i, byte[] bArr, int i2, long[] jArr, int i3) {
            byte[] bArr2 = new byte[PKIFailureInfo.certConfirmed];
            int[] iArr = new int[2];
            int i4 = i << 8;
            int i5 = 0;
            while (i5 < 1024) {
                int i6 = i4 + 1;
                HashUtils.customizableSecureHashAlgorithmKECCAK128Simple(bArr2, 0, PKIFailureInfo.certConfirmed, (short) i4, bArr, i2, 32);
                for (int i7 = 0; i7 < 512; i7++) {
                    int i8 = i3 + i5 + i7;
                    jArr[i8] = 0;
                    for (int i9 = 1; i9 < 78; i9++) {
                        int i10 = 0;
                        for (int i11 = 1; i11 >= 0; i11--) {
                            iArr[i11] = (int) (((long) (QTesla1p.at(bArr2, 0, (i7 * 2) + i11) & Integer.MAX_VALUE)) - (cdt_v[(i9 * 2) + i11] + ((long) i10)));
                            i10 = iArr[i11] >> 31;
                        }
                        jArr[i8] = jArr[i8] + ((long) ((~i10) & 1));
                    }
                    int access$000 = QTesla1p.at(bArr2, 0, i7 * 2) >> 31;
                    jArr[i8] = (((long) access$000) & (-jArr[i8])) | (((long) (~access$000)) & jArr[i8]);
                }
                i5 += 512;
                i4 = i6;
            }
        }
    }

    static class QTesla1PPolynomial {
        private static final long[] zeta = {184007114, 341297933, 172127038, 306069179, 260374244, 269720605, 20436325, 2157599, 36206659, 61987110, 112759694, 92762708, 278504038, 139026960, 183642748, 298230187, 37043356, 230730845, 107820937, 97015745, 156688276, 38891102, 170244636, 259345227, 170077366, 141586883, 100118513, 328793523, 289946488, 263574185, 132014089, 14516260, 87424978, 192691578, 190961717, 262687761, 333967048, 12957952, 326574509, 273585413, 151922543, 195893203, 261889302, 120488377, 169571794, 44896463, 128576039, 68257019, 20594664, 44164717, 36060712, 256009818, 172063915, 211967562, 135533785, 104908181, 203788155, 52968398, 123297488, 44711423, 329131026, 245797804, 220629853, 200431766, 92905498, 215466666, 227373088, 120513729, 274875394, 236766448, 84216704, 97363940, 224003799, 167341181, 333540791, 225846253, 290150331, 137934911, 101127339, 95054535, 7072757, 58600117, 264117725, 207480694, 268253444, 292044590, 166300682, 256585624, 133577520, 119707476, 58169614, 188489502, 184778640, 156039906, 286669262, 112658784, 89254003, 266568758, 290599527, 80715937, 180664712, 225980378, 103512701, 304604206, 327443646, 92082345, 296093912, 144843084, 309484036, 329737605, 141656867, 264967053, 227847682, 328674715, 208663554, 309005608, 315790590, 182996330, 333212133, 203436199, 13052895, 23858345, 173478900, 97132319, 57066271, 70747422, 202106993, 309870606, 56390934, 336126437, 189147643, 219236223, 293351741, 305570320, 18378834, 336914091, 59506067, 277923611, 217306643, 129369847, 308113789, 56954705, 190254906, 199465001, 119331054, 143640880, 17590914, 309468163, 172483421, 153376031, 58864560, 70957183, 237697179, 116097341, 62196815, 80692520, 310642530, 328595292, 12121494, 71200620, 200016287, 235006678, 21821056, 102505389, 183332133, 59734849, 283127491, 313646880, 30359439, 163176989, 50717815, 100183661, 322975554, 92821217, 283119421, 34453836, 303758926, 89460722, 147514506, 175603941, 76494101, 220775631, 304963431, 38821441, 217317485, 301302769, 328727631, 101476595, 270750726, 253708871, 176201368, 324059659, 114780906, 304156831, 273708648, 144095014, 263545324, 179240984, 187811389, 244886526, 202581571, 209325648, 117231636, 182195945, 217965216, 252295904, 332003328, 46153749, 334740528, 62618402, 301165510, 283016648, 212224416, 234984074, 107363471, 125430881, 172821269, 270409387, 156316970, 311644197, 50537885, 248376507, 154072039, 331539029, 48454192, 267029920, 225963915, 16753350, 76840946, 226444843, 108106635, 154887261, 326283837, 101291223, 204194230, 54014060, 104099734, 104245071, 260949411, 333985274, 291682234, 328313139, 29607387, 106291750, 162553334, 275058303, 64179189, 263147140, 15599810, 325103190, 137254480, 66787068, 4755224, 308520011, 181897417, 325162685, 221099032, 131741505, 147534370, 131533267, 144073688, 166398146, 155829711, 252509898, 251605008, 323547097, 216038649, 232629333, 95137254, 287931575, 235583527, 32386598, 76722491, 60825791, 138354268, 400761, 51907675, 197369064, 319840588, 98618414, 84343982, 108113946, 314679670, 134518178, 64988900, 4333172, 295712261, 200707216, 147647414, 318013383, 77682006, 92518996, 42154619, 87464521, 285037574, 332936592, 62635246, 5534097, 308862707, 91097989, 269726589, 273280832, 251670430, 95492698, 21676891, 182964692, 177187742, 294825274, 85128609, 273594538, 93115857, 116308166, 312212122, 18665807, 32192823, 313249299, 98777368, 273984239, 312125377, 205655336, 264861277, 178920022, 341054719, 232663249, 173564046, 176591124, 157537342, 305058098, 277279130, 170028356, 228573747, 31628995, 175280663, 37304323, 122111670, 210658936, 175704183, 314649282, 325535066, 266783938, 301319742, 327923297, 279787306, 304633001, 304153402, 292839078, 147442886, 94150133, 40461238, 221384781, 269671052, 265445273, 208370149, 160863546, 287765159, 339146643, 129600429, 96192870, 113146118, 95879915, 216708053, 285201955, 67756451, 79028039, 309141895, 138447809, 212246614, 12641916, 243544995, 33459809, 76979779, 71155723, 152521243, 200750888, 36425947, 339074467, 319204591, 188312744, 266105966, 280016981, 183723313, 238915015, 23277613, 160934729, 200611286, 163282810, 297928823, 226921588, 86839172, 145317111, 202226936, 51887320, 318474782, 282270658, 221219795, 207597867, 132089009, 334627662, 163952597, 67529059, 173759630, 234865017, 255217646, 277806158, 61964704, 216678166, 96126463, 39218331, 70028373, 4899005, 238135514, 242700690, 284680271, 81041980, 332906491, 463527, 299280916, 204600651, 149654879, 222229829, 26825157, 81825189, 127990873, 200962599, 16149163, 108812393, 217708971, 152638110, 28735779, 5272794, 19720409, 231726324, 49854178, 118319174, 185669526, 223407181, 243138094, 259020958, 308825615, 164156486, 341391280, 192526841, 97036052, 279986894, 20263748, 32228956, 43816679, 343421811, 124320208, 3484106, 31711063, 147679160, 195369505, 54243678, 279088595, 149119313, 301997352, 244557309, 19700779, 138872683, 230523717, 113507709, 135291486, 313025300, 254384479, 219815764, 253574481, 220646316, 124744817, 123915741, 325760383, 123516396, 138140410, 154060994, 314730104, 57286356, 222353426, 76630003, 145380041, 52039855, 229881219, 332902036, 152308429, 95071889, 124799350, 270141530, 47897266, 119620601, 133269057, 138561303, 341820265, 66049665, 273409631, 304306012, 212490958, 210388603, 277413768, 280793261, 223131872, 162407285, 44911970, 316685837, 298709373, 252812339, 230786851, 230319350, 56863422, 341141914, 177295413, 248222411, 215148650, 97970603, 291678055, 161911155, 339645428, 206445182, 31895080, 279676698, 78257775, 268845232, 92545841, 336725589, 47384597, 62216335, 82290365, 89893410, 266117967, 791867, 28042243, 110563426, 183316855, 281174508, 166338432, 86326996, 261473803, 164647535, 84749290, 157518777, 214336587, 72257047, 13358702, 229010735, 204196474, 179927635, 21786785, 330554989, 164559635, 144505300, 280425045, 324057501, 268227440, 323362437, 26891539, 228523003, 166709094, 61174973, 13532911, 42168701, 133044957, 158219357, 220115616, 15174468, 281706353, 283813987, 263212325, 289818392, 247170937, 276072317, 197581495, 33713097, 181695825, 96829354, 32991226, 228583784, 4040287, 65188717, 258204083, 96366799, 176298395, 341574369, 306098123, 218746932, 29191888, 311810435, 305844323, 31614267, 28130094, 72716426, 38568041, 197579396, 14876445, 228525674, 294569685, 2451649, 165929882, 112195415, 204786047, 138216235, 3438132, 126150615, 59754608, 158965324, 268160978, 266231264, 244422459, 306155336, 218178824, 301806695, 208837335, 212153467, 209725081, 269355286, 295716530, 13980580, 264284060, 301901789, 275319045, 107139083, 4006959, 143908623, 139848274, 25357089, 21607040, 340818603, 91260932, 198869267, 45119941, 224113252, 269556513, 42857483, 268925602, 188501450, 235382337, 324688793, 113056679, 177232352, 98280013, 117743899, 87369665, 330110286, 310895756, 268425063, 27568325, 266303142, 181405304, 65876631, 246283438, 127636847, 16153922, 210256884, 9257227, 147272724, 235571791, 340876897, 31558760, 224463520, 229909008, 40943950, 263351999, 14865952, 27279162, 51980445, 99553161, 108121152, 145230283, 217402431, 84060866, 190168688, 46894008, 205718237, 296935065, 331646198, 59709076, 265829428, 214503586, 310273189, 86051634, 247210969, 275872780, 55395653, 302717617, 155583500, 207999042, 293597246, 305796948, 139332832, 198434142, 104197059, 320317582, 101819543, 70813687, 43594385, 241913829, 210308279, 298735610, 151599086, 92093482, 24654121, 52528801, 134711941, 324580593, 293101038, 121757877, 323940193, 276114751, 33522997, 218880483, 46953248, 33126382, 294367143, 161595040, 208968904, 129221110, 323693686, 234366848, 50155901, 123936119, 72127416, 34243899, 171824126, 26019236, 93997235, 28452989, 24219933, 188331672, 181161011, 146526219, 186502916, 258266311, 207146754, 206589869, 189836867, 107762500, 129011227, 222324073, 331319091, 36618753, 141615400, 273319528, 246222615, 156139193, 290104141, 154851520, 310226922, 60187406, 73704819, 225899604, 87931539, 142487643, 152682959, 45891249, 212048348, 148547910, 207745063, 4405848, 179269204, 216233362, 230307487, 303352796, 41616117, 47140231, 13452075, 94626849, 48892822, 78453712, 214721933, 300785835, 1512599, 173577933, 163255132, 239883248, 205714288, 306118903, 106953300, 150085654, 77068348, 246390345, 199698311, 280165539, 256497526, 194381508, 78125966, 168327358, 180735395, 145983352, 243342736, 198463602, 83165996, 286431792, 22885329, 271516106, 66137359, 243561376, 324886778, 149497212, 24531379, 32857894, 62778029, 56960216, 224996784, 129315394, 81068505, 277744916, 215817366, 117205172, 195090165, 287841567, 57750901, 162987791, 259309908, 135370005, 194853269, 236792732, 219249166, 42349628, 27805769, 186263338, 310699018, 6491000, 228545163, 315890485, 22219119, 144392189, 15505150, 87848372, 155973124, 20446561, 177725890, 226669021, 205315635, 269580641, 133696452, 189388357, 314652032, 317225560, 304194584, 157633737, 298144493, 185785271, 337434647, 559796, 4438732, 249110619, 184824722, 221490126, 205632858, 172362641, 176702767, 276712118, 296075254, 111221225, 259809961, 15438443, 198021462, 134378223, 162261445, 170746654, 256890644, 125206341, 307078324, 279553989, 170124925, 296845387, 188226544, 295437875, 315053523, 172025817, 279046062, 189967278, 158662482, 192989875, 326540363, 135446089, 98631439, 257379933, 325004289, 26554274, 62190249, 228828648, 274361329, 18518762, 184854759, 210189061, 186836398, 230859454, 206912014, 201250021, 276332768, 119984643, 91358832, 325377399, 69085488, 307352479, 308876137, 208756649, 32865966, 152976045, 207821125, 66426662, 67585526, 118828370, 3107192, 322037257, 146029104, 106553806, 266958791, 89567376, 153815988, 90786397, 271042585, 203781777, 169087756, 315867500, 306916544, 7528726, 327732739, 227901532, 2263402, 14357894, 269740764, 322090105, 59838559, 298337502, 292797139, 337635349, 66476915, 75612762, 328089387, 155232910, 87069405, 36163560, 273715413, 321325749, 218096743, 308178877, 21861281, 180676741, 135208372, 119891712, 122406065, 267537516, 341350322, 87789083, 196340943, 217070591, 83564209, 159382818, 253921239, 184673854, 213569600, 194031064, 35973794, 18071215, 250854127, 115090766, 147707843, 330337973, 266187164, 27853295, 296801215, 254949704, 43331190, 73930201, 35703461, 119780800, 216998106, 12687572, 250863345, 243908221, 330555990, 296216993, 202100577, 111307303, 151049872, 103451600, 237710099, 78658022, 121490075, 134292528, 88277916, 177315676, 186629690, 77848818, 211822377, 145696683, 289190386, 274721999, 328391282, 218772820, 91324151, 321725584, 277577004, 65732866, 275538085, 144429136, 204062923, 177280727, 214204692, 264758257, 169151951, 335535576, 334002493, 281131703, 305997258, 310527888, 136973519, 216764406, 235954329, 254049694, 285174861, 264316834, 11792643, 149333889, 214699018, 261331547, 317320791, 24527858, 118790777, 264146824, 174296812, 332779737, 94199786, 288227027, 172048372};
        private static final long[] zetainv = {55349550, 249376791, 10796840, 169279765, 79429753, 224785800, 319048719, 26255786, 82245030, 128877559, 194242688, 331783934, 79259743, 58401716, 89526883, 107622248, 126812171, 206603058, 33048689, 37579319, 62444874, 9574084, 8041001, 174424626, 78818320, 129371885, 166295850, 139513654, 199147441, 68038492, 277843711, 65999573, 21850993, 252252426, 124803757, 15185295, 68854578, 54386191, 197879894, 131754200, 265727759, 156946887, 166260901, 255298661, 209284049, 222086502, 264918555, 105866478, 240124977, 192526705, 232269274, 141476000, 47359584, 13020587, 99668356, 92713232, 330889005, 126578471, 223795777, 307873116, 269646376, 300245387, 88626873, 46775362, 315723282, 77389413, 13238604, 195868734, 228485811, 92722450, 325505362, 307602783, 149545513, 130006977, 158902723, 89655338, 184193759, 260012368, 126505986, 147235634, 255787494, 2226255, 76039061, 221170512, 223684865, 208368205, 162899836, 321715296, 35397700, 125479834, 22250828, 69861164, 307413017, 256507172, 188343667, 15487190, 267963815, 277099662, 5941228, 50779438, 45239075, 283738018, 21486472, 73835813, 329218683, 341313175, 115675045, 15843838, 336047851, 36660033, 27709077, 174488821, 139794800, 72533992, 252790180, 189760589, 254009201, 76617786, 237022771, 197547473, 21539320, 340469385, 224748207, 275991051, 277149915, 135755452, 190600532, 310710611, 134819928, 34700440, 36224098, 274491089, 18199178, 252217745, 223591934, 67243809, 142326556, 136664563, 112717123, 156740179, 133387516, 158721818, 325057815, 69215248, 114747929, 281386328, 317022303, 18572288, 86196644, 244945138, 208130488, 17036214, 150586702, 184914095, 153609299, 64530515, 171550760, 28523054, 48138702, 155350033, 46731190, 173451652, 64022588, 36498253, 218370236, 86685933, 172829923, 181315132, 209198354, 145555115, 328138134, 83766616, 232355352, 47501323, 66864459, 166873810, 171213936, 137943719, 122086451, 158751855, 94465958, 339137845, 343016781, 6141930, 157791306, 45432084, 185942840, 39381993, 26351017, 28924545, 154188220, 209880125, 73995936, 138260942, 116907556, 165850687, 323130016, 187603453, 255728205, 328071427, 199184388, 321357458, 27686092, 115031414, 337085577, 32877559, 157313239, 315770808, 301226949, 124327411, 106783845, 148723308, 208206572, 84266669, 180588786, 285825676, 55735010, 148486412, 226371405, 127759211, 65831661, 262508072, 214261183, 118579793, 286616361, 280798548, 310718683, 319045198, 194079365, 18689799, 100015201, 277439218, 72060471, 320691248, 57144785, 260410581, 145112975, 100233841, 197593225, 162841182, 175249219, 265450611, 149195069, 87079051, 63411038, 143878266, 97186232, 266508229, 193490923, 236623277, 37457674, 137862289, 103693329, 180321445, 169998644, 342063978, 42790742, 128854644, 265122865, 294683755, 248949728, 330124502, 296436346, 301960460, 40223781, 113269090, 127343215, 164307373, 339170729, 135831514, 195028667, 131528229, 297685328, 190893618, 201088934, 255645038, 117676973, 269871758, 283389171, 33349655, 188725057, 53472436, 187437384, 97353962, 70257049, 201961177, 306957824, 12257486, 121252504, 214565350, 235814077, 153739710, 136986708, 136429823, 85310266, 157073661, 197050358, 162415566, 155244905, 319356644, 315123588, 249579342, 317557341, 171752451, 309332678, 271449161, 219640458, 293420676, 109209729, 19882891, 214355467, 134607673, 181981537, 49209434, 310450195, 296623329, 124696094, 310053580, 67461826, 19636384, 221818700, 50475539, 18995984, 208864636, 291047776, 318922456, 251483095, 191977491, 44840967, 133268298, 101662748, 299982192, 272762890, 241757034, 23258995, 239379518, 145142435, 204243745, 37779629, 49979331, 135577535, 187993077, 40858960, 288180924, 67703797, 96365608, 257524943, 33303388, 129072991, 77747149, 283867501, 11930379, 46641512, 137858340, 296682569, 153407889, 259515711, 126174146, 198346294, 235455425, 244023416, 291596132, 316297415, 328710625, 80224578, 302632627, 113667569, 119113057, 312017817, 2699680, 108004786, 196303853, 334319350, 133319693, 327422655, 215939730, 97293139, 277699946, 162171273, 77273435, 316008252, 75151514, 32680821, 13466291, 256206912, 225832678, 245296564, 166344225, 230519898, 18887784, 108194240, 155075127, 74650975, 300719094, 74020064, 119463325, 298456636, 144707310, 252315645, 2757974, 321969537, 318219488, 203728303, 199667954, 339569618, 236437494, 68257532, 41674788, 79292517, 329595997, 47860047, 74221291, 133851496, 131423110, 134739242, 41769882, 125397753, 37421241, 99154118, 77345313, 75415599, 184611253, 283821969, 217425962, 340138445, 205360342, 138790530, 231381162, 177646695, 341124928, 49006892, 115050903, 328700132, 145997181, 305008536, 270860151, 315446483, 311962310, 37732254, 31766142, 314384689, 124829645, 37478454, 2002208, 167278182, 247209778, 85372494, 278387860, 339536290, 114992793, 310585351, 246747223, 161880752, 309863480, 145995082, 67504260, 96405640, 53758185, 80364252, 59762590, 61870224, 328402109, 123460961, 185357220, 210531620, 301407876, 330043666, 282401604, 176867483, 115053574, 316685038, 20214140, 75349137, 19519076, 63151532, 199071277, 179016942, 13021588, 321789792, 163648942, 139380103, 114565842, 330217875, 271319530, 129239990, 186057800, 258827287, 178929042, 82102774, 257249581, 177238145, 62402069, 160259722, 233013151, 315534334, 342784710, 77458610, 253683167, 261286212, 281360242, 296191980, 6850988, 251030736, 74731345, 265318802, 63899879, 311681497, 137131395, 3931149, 181665422, 51898522, 245605974, 128427927, 95354166, 166281164, 2434663, 286713155, 113257227, 112789726, 90764238, 44867204, 26890740, 298664607, 181169292, 120444705, 62783316, 66162809, 133187974, 131085619, 39270565, 70166946, 277526912, 1756312, 205015274, 210307520, 223955976, 295679311, 73435047, 218777227, 248504688, 191268148, 10674541, 113695358, 291536722, 198196536, 266946574, 121223151, 286290221, 28846473, 189515583, 205436167, 220060181, 17816194, 219660836, 218831760, 122930261, 90002096, 123760813, 89192098, 30551277, 208285091, 230068868, 113052860, 204703894, 323875798, 99019268, 41579225, 194457264, 64487982, 289332899, 148207072, 195897417, 311865514, 340092471, 219256369, 154766, 299759898, 311347621, 323312829, 63589683, 246540525, 151049736, 2185297, 179420091, 34750962, 84555619, 100438483, 120169396, 157907051, 225257403, 293722399, 111850253, 323856168, 338303783, 314840798, 190938467, 125867606, 234764184, 327427414, 142613978, 215585704, 261751388, 316751420, 121346748, 193921698, 138975926, 44295661, 343113050, 10670086, 262534597, 58896306, 100875887, 105441063, 338677572, 273548204, 304358246, 247450114, 126898411, 281611873, 65770419, 88358931, 108711560, 169816947, 276047518, 179623980, 8948915, 211487568, 135978710, 122356782, 61305919, 25101795, 291689257, 141349641, 198259466, 256737405, 116654989, 45647754, 180293767, 142965291, 182641848, 320298964, 104661562, 159853264, 63559596, 77470611, 155263833, 24371986, 4502110, 307150630, 142825689, 191055334, 272420854, 266596798, 310116768, 100031582, 330934661, 131329963, 205128768, 34434682, 264548538, 275820126, 58374622, 126868524, 247696662, 230430459, 247383707, 213976148, 4429934, 55811418, 182713031, 135206428, 78131304, 73905525, 122191796, 303115339, 249426444, 196133691, 50737499, 39423175, 38943576, 63789271, 15653280, 42256835, 76792639, 18041511, 28927295, 167872394, 132917641, 221464907, 306272254, 168295914, 311947582, 115002830, 173548221, 66297447, 38518479, 186039235, 166985453, 170012531, 110913328, 2521858, 164656555, 78715300, 137921241, 31451200, 69592338, 244799209, 30327278, 311383754, 324910770, 31364455, 227268411, 250460720, 69982039, 258447968, 48751303, 166388835, 160611885, 321899686, 248083879, 91906147, 70295745, 73849988, 252478588, 34713870, 338042480, 280941331, 10639985, 58539003, 256112056, 301421958, 251057581, 265894571, 25563194, 195929163, 142869361, 47864316, 339243405, 278587677, 209058399, 28896907, 235462631, 259232595, 244958163, 23735989, 146207513, 291668902, 343175816, 205222309, 282750786, 266854086, 311189979, 107993050, 55645002, 248439323, 110947244, 127537928, 20029480, 91971569, 91066679, 187746866, 177178431, 199502889, 212043310, 196042207, 211835072, 122477545, 18413892, 161679160, 35056566, 338821353, 276789509, 206322097, 18473387, 327976767, 80429437, 279397388, 68518274, 181023243, 237284827, 313969190, 15263438, 51894343, 9591303, 82627166, 239331506, 239476843, 289562517, 139382347, 242285354, 17292740, 188689316, 235469942, 117131734, 266735631, 326823227, 117612662, 76546657, 295122385, 12037548, 189504538, 95200070, 293038692, 31932380, 187259607, 73167190, 170755308, 218145696, 236213106, 108592503, 131352161, 60559929, 42411067, 280958175, 8836049, 297422828, 11573249, 91280673, 125611361, 161380632, 226344941, 134250929, 140995006, 98690051, 155765188, 164335593, 80031253, 199481563, 69867929, 39419746, 228795671, 19516918, 167375209, 89867706, 72825851, 242099982, 14848946, 42273808, 126259092, 304755136, 38613146, 122800946, 267082476, 167972636, 196062071, 254115855, 39817651, 309122741, 60457156, 250755360, 20601023, 243392916, 292858762, 180399588, 313217138, 29929697, 60449086, 283841728, 160244444, 241071188, 321755521, 108569899, 143560290, 272375957, 331455083, 14981285, 32934047, 262884057, 281379762, 227479236, 105879398, 272619394, 284712017, 190200546, 171093156, 34108414, 325985663, 199935697, 224245523, 144111576, 153321671, 286621872, 35462788, 214206730, 126269934, 65652966, 284070510, 6662486, 325197743, 38006257, 50224836, 124340354, 154428934, 7450140, 287185643, 33705971, 141469584, 272829155, 286510306, 246444258, 170097677, 319718232, 330523682, 140140378, 10364444, 160580247, 27785987, 34570969, 134913023, 14901862, 115728895, 78609524, 201919710, 13838972, 34092541, 198733493, 47482665, 251494232, 16132931, 38972371, 240063876, 117596199, 162911865, 262860640, 52977050, 77007819, 254322574, 230917793, 56907315, 187536671, 158797937, 155087075, 285406963, 223869101, 209999057, 86990953, 177275895, 51531987, 75323133, 136095883, 79458852, 284976460, 336503820, 248522042, 242449238, 205641666, 53426246, 117730324, 10035786, 176235396, 119572778, 246212637, 259359873, 106810129, 68701183, 223062848, 116203489, 128109911, 250671079, 143144811, 122946724, 97778773, 14445551, 298865154, 220279089, 290608179, 139788422, 238668396, 208042792, 131609015, 171512662, 87566759, 307515865, 299411860, 322981913, 275319558, 215000538, 298680114, 174004783, 223088200, 81687275, 147683374, 191654034, 69991164, 17002068, 330618625, 9609529, 80888816, 152614860, 150884999, 256151599, 329060317, 211562488, 80002392, 53630089, 14783054, 243458064, 201989694, 173499211, 84231350, 173331941, 304685475, 186888301, 246560832, 235755640, 112845732, 306533221, 45346390, 159933829, 204549617, 65072539, 250813869, 230816883, 281589467, 307369918, 341418978, 323140252, 73855972, 83202333, 37507398, 171449539, 2278644, 159569463, 171528205};

        QTesla1PPolynomial() {
        }

        static long barr_reduce(long j) {
            return j - (((3 * j) >> 30) * 343576577);
        }

        static void ntt(long[] jArr, long[] jArr2) {
            int i = 512;
            int i2 = 0;
            while (i > 0) {
                int i3 = i2;
                int i4 = 0;
                while (i4 < 1024) {
                    int i5 = i3 + 1;
                    long j = (long) ((int) jArr2[i3]);
                    int i6 = i4;
                    while (i6 < i4 + i) {
                        int i7 = i6 + i;
                        long reduce = reduce(jArr[i7] * j);
                        jArr[i7] = jArr[i6] + (343576577 - reduce);
                        jArr[i6] = reduce + jArr[i6];
                        i6++;
                    }
                    i4 = i6 + i;
                    i3 = i5;
                }
                i >>= 1;
                i2 = i3;
            }
        }

        static void nttinv(long[] jArr, int i, long[] jArr2) {
            int i2 = 1;
            int i3 = 0;
            while (i2 < 1024) {
                int i4 = i3;
                int i5 = 0;
                while (i5 < 1024) {
                    int i6 = i4 + 1;
                    int i7 = (int) jArr2[i4];
                    int i8 = i5;
                    while (i8 < i5 + i2) {
                        int i9 = i + i8;
                        long j = jArr[i9];
                        int i10 = i9 + i2;
                        jArr[i9] = jArr[i10] + j;
                        jArr[i10] = reduce(((long) i7) * (j + (687153154 - jArr[i10])));
                        i8++;
                    }
                    i5 = i8 + i2;
                    i4 = i6;
                }
                int i11 = i2 * 2;
                int i12 = 0;
                while (i12 < 1024) {
                    int i13 = i4 + 1;
                    int i14 = (int) jArr2[i4];
                    int i15 = i12;
                    while (i15 < i12 + i11) {
                        int i16 = i + i15;
                        long j2 = jArr[i16];
                        int i17 = i16 + i11;
                        jArr[i16] = barr_reduce(jArr[i17] + j2);
                        jArr[i17] = reduce(((long) i14) * (j2 + (687153154 - jArr[i17])));
                        i15++;
                    }
                    i12 = i15 + i11;
                    i4 = i13;
                }
                i2 = i11 * 2;
                i3 = i4;
            }
        }

        static void nttinv(long[] jArr, long[] jArr2) {
            int i = 1;
            int i2 = 0;
            while (i < 1024) {
                int i3 = i2;
                int i4 = 0;
                while (i4 < 1024) {
                    int i5 = i3 + 1;
                    int i6 = (int) jArr2[i3];
                    int i7 = i4;
                    while (i7 < i4 + i) {
                        long j = jArr[i7];
                        if (i == 16) {
                            jArr[i7] = barr_reduce(jArr[i7 + i] + j);
                        } else {
                            jArr[i7] = jArr[i7 + i] + j;
                        }
                        int i8 = i7 + i;
                        jArr[i8] = reduce(((long) i6) * (j - jArr[i8]));
                        i7++;
                    }
                    i4 = i7 + i;
                    i3 = i5;
                }
                i *= 2;
                i2 = i3;
            }
            for (int i9 = 0; i9 < 512; i9++) {
                jArr[i9] = reduce(jArr[i9] * 172048372);
            }
        }

        static void poly_add(long[] jArr, long[] jArr2, long[] jArr3) {
            for (int i = 0; i < 1024; i++) {
                jArr[i] = jArr2[i] + jArr3[i];
            }
        }

        static void poly_add_correct(long[] jArr, int i, long[] jArr2, int i2, long[] jArr3, int i3) {
            for (int i4 = 0; i4 < 1024; i4++) {
                int i5 = i + i4;
                jArr[i5] = jArr2[i2 + i4] + jArr3[i3 + i4];
                jArr[i5] = jArr[i5] - 343576577;
                jArr[i5] = jArr[i5] + (343576577 & (jArr[i5] >> 31));
            }
        }

        static void poly_mul(long[] jArr, int i, long[] jArr2, int i2, long[] jArr3) {
            poly_pointwise(jArr, i, jArr2, i2, jArr3);
            nttinv(jArr, i, zetainv);
        }

        static void poly_mul(long[] jArr, long[] jArr2, long[] jArr3) {
            poly_pointwise(jArr, jArr2, jArr3);
            nttinv(jArr, zetainv);
        }

        static void poly_ntt(long[] jArr, long[] jArr2) {
            for (int i = 0; i < 1024; i++) {
                jArr[i] = jArr2[i];
            }
            ntt(jArr, zeta);
        }

        static void poly_pointwise(long[] jArr, int i, long[] jArr2, int i2, long[] jArr3) {
            for (int i3 = 0; i3 < 1024; i3++) {
                jArr[i3 + i] = reduce(jArr2[i3 + i2] * jArr3[i3]);
            }
        }

        static void poly_pointwise(long[] jArr, long[] jArr2, long[] jArr3) {
            for (int i = 0; i < 1024; i++) {
                jArr[i] = reduce(jArr2[i] * jArr3[i]);
            }
        }

        static void poly_sub(long[] jArr, int i, long[] jArr2, int i2, long[] jArr3, int i3) {
            for (int i4 = 0; i4 < 1024; i4++) {
                jArr[i + i4] = barr_reduce(jArr2[i2 + i4] - jArr3[i3 + i4]);
            }
        }

        static void poly_sub_correct(int[] iArr, int[] iArr2, int[] iArr3) {
            for (int i = 0; i < 1024; i++) {
                iArr[i] = iArr2[i] - iArr3[i];
                iArr[i] = iArr[i] + ((iArr[i] >> 31) & QTesla1p.PARAM_Q);
            }
        }

        static void poly_uniform(long[] jArr, byte[] bArr, int i) {
            int i2;
            byte[] bArr2 = new byte[18144];
            HashUtils.customizableSecureHashAlgorithmKECCAK128Simple(bArr2, 0, 18144, 0, bArr, i, 32);
            int i3 = 108;
            short s = (short) 1;
            int i4 = 0;
            int i5 = 0;
            while (i5 < 4096) {
                if (i4 > (i3 * 168) - 16) {
                    HashUtils.customizableSecureHashAlgorithmKECCAK128Simple(bArr2, 0, 18144, s, bArr, i, 32);
                    i3 = 1;
                    s = (short) (s + 1);
                    i4 = 0;
                }
                int littleEndianToInt = Pack.littleEndianToInt(bArr2, i4) & 536870911;
                int i6 = i4 + 4;
                int littleEndianToInt2 = Pack.littleEndianToInt(bArr2, i6) & 536870911;
                int i7 = i6 + 4;
                int littleEndianToInt3 = Pack.littleEndianToInt(bArr2, i7) & 536870911;
                int i8 = i7 + 4;
                int littleEndianToInt4 = 536870911 & Pack.littleEndianToInt(bArr2, i8);
                i4 = i8 + 4;
                if (littleEndianToInt >= QTesla1p.PARAM_Q || i5 >= 4096) {
                    i2 = i5;
                } else {
                    i2 = i5 + 1;
                    jArr[i5] = reduce(((long) littleEndianToInt) * 13632409);
                }
                if (littleEndianToInt2 < QTesla1p.PARAM_Q && i2 < 4096) {
                    jArr[i2] = reduce(((long) littleEndianToInt2) * 13632409);
                    i2++;
                }
                if (littleEndianToInt3 >= QTesla1p.PARAM_Q || i2 >= 4096) {
                    i5 = i2;
                } else {
                    jArr[i2] = reduce(((long) littleEndianToInt3) * 13632409);
                    i5 = i2 + 1;
                }
                if (littleEndianToInt4 < QTesla1p.PARAM_Q && i5 < 4096) {
                    jArr[i5] = reduce(((long) littleEndianToInt4) * 13632409);
                    i5++;
                }
            }
        }

        static long reduce(long j) {
            return (j + (((QTesla1p.PARAM_QINV * j) & BodyPartID.bodyIdMax) * 343576577)) >> 32;
        }

        static void sparse_mul16(int[] iArr, int[] iArr2, int[] iArr3, short[] sArr) {
            for (int i = 0; i < 1024; i++) {
                iArr[i] = 0;
            }
            for (int i2 = 0; i2 < 25; i2++) {
                int i3 = iArr3[i2];
                for (int i4 = 0; i4 < i3; i4++) {
                    iArr[i4] = iArr[i4] - (sArr[i2] * iArr2[(i4 + 1024) - i3]);
                }
                for (int i5 = i3; i5 < 1024; i5++) {
                    iArr[i5] = iArr[i5] + (sArr[i2] * iArr2[i5 - i3]);
                }
            }
        }

        static void sparse_mul32(int[] iArr, int[] iArr2, int[] iArr3, short[] sArr) {
            for (int i = 0; i < 1024; i++) {
                iArr[i] = 0;
            }
            for (int i2 = 0; i2 < 25; i2++) {
                int i3 = iArr3[i2];
                for (int i4 = 0; i4 < i3; i4++) {
                    iArr[i4] = iArr[i4] - (sArr[i2] * iArr2[(i4 + 1024) - i3]);
                }
                for (int i5 = i3; i5 < 1024; i5++) {
                    iArr[i5] = iArr[i5] + (sArr[i2] * iArr2[i5 - i3]);
                }
            }
        }

        static void sparse_mul32(long[] jArr, int i, int[] iArr, int i2, int[] iArr2, short[] sArr) {
            for (int i3 = 0; i3 < 1024; i3++) {
                jArr[i + i3] = 0;
            }
            for (int i4 = 0; i4 < 25; i4++) {
                int i5 = iArr2[i4];
                for (int i6 = 0; i6 < i5; i6++) {
                    int i7 = i + i6;
                    jArr[i7] = jArr[i7] - ((long) (sArr[i4] * iArr[((i2 + i6) + 1024) - i5]));
                }
                for (int i8 = i5; i8 < 1024; i8++) {
                    int i9 = i + i8;
                    jArr[i9] = jArr[i9] + ((long) (sArr[i4] * iArr[(i2 + i8) - i5]));
                }
            }
        }

        static void sparse_mul8(long[] jArr, int i, byte[] bArr, int i2, int[] iArr, short[] sArr) {
            for (int i3 = 0; i3 < 1024; i3++) {
                jArr[i + i3] = 0;
            }
            for (int i4 = 0; i4 < 25; i4++) {
                int i5 = iArr[i4];
                for (int i6 = 0; i6 < i5; i6++) {
                    int i7 = i + i6;
                    jArr[i7] = jArr[i7] - ((long) (sArr[i4] * bArr[((i2 + i6) + 1024) - i5]));
                }
                for (int i8 = i5; i8 < 1024; i8++) {
                    int i9 = i + i8;
                    jArr[i9] = jArr[i9] + ((long) (sArr[i4] * bArr[(i2 + i8) - i5]));
                }
            }
        }

        static void sparse_mul8(long[] jArr, byte[] bArr, int[] iArr, short[] sArr) {
            for (int i = 0; i < 1024; i++) {
                jArr[i] = 0;
            }
            for (int i2 = 0; i2 < 25; i2++) {
                int i3 = iArr[i2];
                for (int i4 = 0; i4 < i3; i4++) {
                    jArr[i4] = jArr[i4] - ((long) (sArr[i2] * bArr[(i4 + 1024) - i3]));
                }
                for (int i5 = i3; i5 < 1024; i5++) {
                    jArr[i5] = jArr[i5] + ((long) (sArr[i2] * bArr[i5 - i3]));
                }
            }
        }
    }

    QTesla1p() {
    }

    private static int absolute(int i) {
        int i2 = i >> 31;
        return (i ^ i2) - i2;
    }

    private static long absolute(long j) {
        long j2 = j >> 63;
        return (j ^ j2) - j2;
    }

    /* access modifiers changed from: private */
    public static int at(byte[] bArr, int i, int i2) {
        int i3 = (i * 4) + (i2 * 4);
        int i4 = i3 + 1;
        int i5 = i4 + 1;
        return (bArr[i5 + 1] << 24) | (bArr[i3] & 255) | ((bArr[i4] & 255) << 8) | ((bArr[i5] & 255) << Tnaf.POW_2_WIDTH);
    }

    private static void at(byte[] bArr, int i, int i2, int i3) {
        Pack.intToLittleEndian(i3, bArr, (i * 4) + (i2 * 4));
    }

    private static boolean checkPolynomial(long[] jArr, int i, int i2) {
        int i3;
        int i4 = 1024;
        long[] jArr2 = new long[1024];
        for (int i5 = 0; i5 < 1024; i5++) {
            jArr2[i5] = absolute(jArr[i + i5]);
        }
        int i6 = 0;
        for (int i7 = 0; i7 < 25; i7++) {
            int i8 = 0;
            while (true) {
                i3 = i4 - 1;
                if (i8 >= i3) {
                    break;
                }
                int i9 = i8 + 1;
                long j = (jArr2[i9] - jArr2[i8]) >> 31;
                long j2 = jArr2[i8];
                long j3 = ~j;
                long j4 = (jArr2[i9] & j) | (j2 & j3);
                jArr2[i9] = (j & jArr2[i8]) | (jArr2[i9] & j3);
                jArr2[i8] = j4;
                i8 = i9;
            }
            i6 = (int) (((long) i6) + jArr2[i3]);
            i4--;
        }
        return i6 > i2;
    }

    static void decodePublicKey(int[] iArr, byte[] bArr, int i, byte[] bArr2) {
        int i2 = 0;
        for (int i3 = 0; i3 < 4096; i3 += 32) {
            iArr[i3] = at(bArr2, i2, 0) & 536870911;
            iArr[i3 + 1] = ((at(bArr2, i2, 0) >>> 29) | (at(bArr2, i2, 1) << 3)) & 536870911;
            iArr[i3 + 2] = ((at(bArr2, i2, 1) >>> 26) | (at(bArr2, i2, 2) << 6)) & 536870911;
            iArr[i3 + 3] = ((at(bArr2, i2, 2) >>> 23) | (at(bArr2, i2, 3) << 9)) & 536870911;
            iArr[i3 + 4] = ((at(bArr2, i2, 3) >>> 20) | (at(bArr2, i2, 4) << 12)) & 536870911;
            iArr[i3 + 5] = ((at(bArr2, i2, 4) >>> 17) | (at(bArr2, i2, 5) << 15)) & 536870911;
            iArr[i3 + 6] = ((at(bArr2, i2, 5) >>> 14) | (at(bArr2, i2, 6) << 18)) & 536870911;
            iArr[i3 + 7] = ((at(bArr2, i2, 6) >>> 11) | (at(bArr2, i2, 7) << 21)) & 536870911;
            iArr[i3 + 8] = ((at(bArr2, i2, 7) >>> 8) | (at(bArr2, i2, 8) << 24)) & 536870911;
            iArr[i3 + 9] = ((at(bArr2, i2, 8) >>> 5) | (at(bArr2, i2, 9) << 27)) & 536870911;
            iArr[i3 + 10] = (at(bArr2, i2, 9) >>> 2) & 536870911;
            iArr[i3 + 11] = ((at(bArr2, i2, 9) >>> 31) | (at(bArr2, i2, 10) << 1)) & 536870911;
            iArr[i3 + 12] = ((at(bArr2, i2, 10) >>> 28) | (at(bArr2, i2, 11) << 4)) & 536870911;
            iArr[i3 + 13] = ((at(bArr2, i2, 11) >>> 25) | (at(bArr2, i2, 12) << 7)) & 536870911;
            iArr[i3 + 14] = ((at(bArr2, i2, 12) >>> 22) | (at(bArr2, i2, 13) << 10)) & 536870911;
            iArr[i3 + 15] = ((at(bArr2, i2, 13) >>> 19) | (at(bArr2, i2, 14) << 13)) & 536870911;
            iArr[i3 + 16] = ((at(bArr2, i2, 14) >>> 16) | (at(bArr2, i2, 15) << 16)) & 536870911;
            iArr[i3 + 17] = ((at(bArr2, i2, 15) >>> 13) | (at(bArr2, i2, 16) << 19)) & 536870911;
            iArr[i3 + 18] = ((at(bArr2, i2, 16) >>> 10) | (at(bArr2, i2, 17) << 22)) & 536870911;
            iArr[i3 + 19] = ((at(bArr2, i2, 17) >>> 7) | (at(bArr2, i2, 18) << 25)) & 536870911;
            iArr[i3 + 20] = ((at(bArr2, i2, 18) >>> 4) | (at(bArr2, i2, 19) << 28)) & 536870911;
            iArr[i3 + 21] = (at(bArr2, i2, 19) >>> 1) & 536870911;
            iArr[i3 + 22] = ((at(bArr2, i2, 19) >>> 30) | (at(bArr2, i2, 20) << 2)) & 536870911;
            iArr[i3 + 23] = ((at(bArr2, i2, 20) >>> 27) | (at(bArr2, i2, 21) << 5)) & 536870911;
            iArr[i3 + 24] = ((at(bArr2, i2, 21) >>> 24) | (at(bArr2, i2, 22) << 8)) & 536870911;
            iArr[i3 + 25] = ((at(bArr2, i2, 22) >>> 21) | (at(bArr2, i2, 23) << 11)) & 536870911;
            iArr[i3 + 26] = ((at(bArr2, i2, 23) >>> 18) | (at(bArr2, i2, 24) << 14)) & 536870911;
            iArr[i3 + 27] = ((at(bArr2, i2, 24) >>> 15) | (at(bArr2, i2, 25) << 17)) & 536870911;
            iArr[i3 + 28] = ((at(bArr2, i2, 25) >>> 12) | (at(bArr2, i2, 26) << 20)) & 536870911;
            iArr[i3 + 29] = ((at(bArr2, i2, 26) >>> 9) | (at(bArr2, i2, 27) << 23)) & 536870911;
            iArr[i3 + 30] = 536870911 & ((at(bArr2, i2, 27) >>> 6) | (at(bArr2, i2, 28) << 26));
            iArr[i3 + 31] = at(bArr2, i2, 28) >>> 3;
            i2 += 29;
        }
        System.arraycopy(bArr2, 14848, bArr, i, 32);
    }

    static void decodeSignature(byte[] bArr, long[] jArr, byte[] bArr2, int i) {
        int i2 = 0;
        for (int i3 = 0; i3 < 1024; i3 += 16) {
            jArr[i3] = (long) ((at(bArr2, i2, 0) << 12) >> 12);
            jArr[i3 + 1] = (long) ((at(bArr2, i2, 0) >>> 20) | ((at(bArr2, i2, 1) << 24) >> 12));
            jArr[i3 + 2] = (long) ((at(bArr2, i2, 1) << 4) >> 12);
            jArr[i3 + 3] = (long) ((at(bArr2, i2, 1) >>> 28) | ((at(bArr2, i2, 2) << 16) >> 12));
            jArr[i3 + 4] = (long) ((at(bArr2, i2, 2) >>> 16) | ((at(bArr2, i2, 3) << 28) >> 12));
            jArr[i3 + 5] = (long) ((at(bArr2, i2, 3) << 8) >> 12);
            jArr[i3 + 6] = (long) ((at(bArr2, i2, 3) >>> 24) | ((at(bArr2, i2, 4) << 20) >> 12));
            jArr[i3 + 7] = (long) (at(bArr2, i2, 4) >> 12);
            jArr[i3 + 8] = (long) ((at(bArr2, i2, 5) << 12) >> 12);
            jArr[i3 + 9] = (long) ((at(bArr2, i2, 5) >>> 20) | ((at(bArr2, i2, 6) << 24) >> 12));
            jArr[i3 + 10] = (long) ((at(bArr2, i2, 6) << 4) >> 12);
            jArr[i3 + 11] = (long) ((at(bArr2, i2, 6) >>> 28) | ((at(bArr2, i2, 7) << 16) >> 12));
            jArr[i3 + 12] = (long) ((at(bArr2, i2, 7) >>> 16) | ((at(bArr2, i2, 8) << 28) >> 12));
            jArr[i3 + 13] = (long) ((at(bArr2, i2, 8) << 8) >> 12);
            jArr[i3 + 14] = (long) ((at(bArr2, i2, 8) >>> 24) | ((at(bArr2, i2, 9) << 20) >> 12));
            jArr[i3 + 15] = (long) (at(bArr2, i2, 9) >> 12);
            i2 += 10;
        }
        System.arraycopy(bArr2, i + 2560, bArr, 0, 32);
    }

    static void encodeC(int[] iArr, short[] sArr, byte[] bArr, int i) {
        short[] sArr2 = new short[1024];
        byte[] bArr2 = new byte[168];
        HashUtils.customizableSecureHashAlgorithmKECCAK128Simple(bArr2, 0, 168, 0, bArr, i, 32);
        Arrays.fill(sArr2, (short) 0);
        short s = (short) 1;
        int i2 = 0;
        int i3 = 0;
        while (i3 < 25) {
            if (i2 > 165) {
                HashUtils.customizableSecureHashAlgorithmKECCAK128Simple(bArr2, 0, 168, s, bArr, i, 32);
                i2 = 0;
                s = (short) (s + 1);
            }
            int i4 = ((bArr2[i2] << 8) | (bArr2[i2 + 1] & 255)) & 1023;
            if (sArr2[i4] == 0) {
                if ((bArr2[i2 + 2] & 1) == 1) {
                    sArr2[i4] = -1;
                } else {
                    sArr2[i4] = 1;
                }
                iArr[i3] = i4;
                sArr[i3] = sArr2[i4];
                i3++;
            }
            i2 += 3;
        }
    }

    static void encodePrivateKey(byte[] bArr, long[] jArr, long[] jArr2, byte[] bArr2, int i) {
        for (int i2 = 0; i2 < 1024; i2++) {
            bArr[0 + i2] = (byte) ((int) jArr[i2]);
        }
        for (int i3 = 0; i3 < 4; i3++) {
            for (int i4 = 0; i4 < 1024; i4++) {
                int i5 = (i3 * 1024) + i4;
                bArr[1024 + i5] = (byte) ((int) jArr2[i5]);
            }
        }
        System.arraycopy(bArr2, i, bArr, 5120, 64);
    }

    static void encodePublicKey(byte[] bArr, long[] jArr, byte[] bArr2, int i) {
        int i2 = 0;
        for (int i3 = 0; i3 < 3712; i3 += 29) {
            int i4 = i2 + 1;
            at(bArr, i3, 0, (int) (jArr[i2] | (jArr[i4] << 29)));
            int i5 = i2 + 2;
            at(bArr, i3, 1, (int) ((jArr[i4] >> 3) | (jArr[i5] << 26)));
            int i6 = i2 + 3;
            at(bArr, i3, 2, (int) ((jArr[i5] >> 6) | (jArr[i6] << 23)));
            int i7 = i2 + 4;
            at(bArr, i3, 3, (int) ((jArr[i6] >> 9) | (jArr[i7] << 20)));
            int i8 = i2 + 5;
            at(bArr, i3, 4, (int) ((jArr[i7] >> 12) | (jArr[i8] << 17)));
            int i9 = i2 + 6;
            at(bArr, i3, 5, (int) ((jArr[i8] >> 15) | (jArr[i9] << 14)));
            int i10 = i2 + 7;
            at(bArr, i3, 6, (int) ((jArr[i9] >> 18) | (jArr[i10] << 11)));
            int i11 = i2 + 8;
            at(bArr, i3, 7, (int) ((jArr[i10] >> 21) | (jArr[i11] << 8)));
            int i12 = i2 + 9;
            at(bArr, i3, 8, (int) ((jArr[i11] >> 24) | (jArr[i12] << 5)));
            int i13 = i2 + 11;
            at(bArr, i3, 9, (int) ((jArr[i12] >> 27) | (jArr[i2 + 10] << 2) | (jArr[i13] << 31)));
            int i14 = i2 + 12;
            at(bArr, i3, 10, (int) ((jArr[i13] >> 1) | (jArr[i14] << 28)));
            int i15 = i2 + 13;
            at(bArr, i3, 11, (int) ((jArr[i14] >> 4) | (jArr[i15] << 25)));
            int i16 = i2 + 14;
            at(bArr, i3, 12, (int) ((jArr[i15] >> 7) | (jArr[i16] << 22)));
            int i17 = i2 + 15;
            at(bArr, i3, 13, (int) ((jArr[i16] >> 10) | (jArr[i17] << 19)));
            int i18 = i2 + 16;
            at(bArr, i3, 14, (int) ((jArr[i17] >> 13) | (jArr[i18] << 16)));
            int i19 = i2 + 17;
            at(bArr, i3, 15, (int) ((jArr[i18] >> 16) | (jArr[i19] << 13)));
            int i20 = i2 + 18;
            at(bArr, i3, 16, (int) ((jArr[i19] >> 19) | (jArr[i20] << 10)));
            int i21 = i2 + 19;
            at(bArr, i3, 17, (int) ((jArr[i20] >> 22) | (jArr[i21] << 7)));
            int i22 = i2 + 20;
            at(bArr, i3, 18, (int) ((jArr[i21] >> 25) | (jArr[i22] << 4)));
            int i23 = i2 + 22;
            at(bArr, i3, 19, (int) ((jArr[i22] >> 28) | (jArr[i2 + 21] << 1) | (jArr[i23] << 30)));
            int i24 = i2 + 23;
            at(bArr, i3, 20, (int) ((jArr[i23] >> 2) | (jArr[i24] << 27)));
            int i25 = i2 + 24;
            at(bArr, i3, 21, (int) ((jArr[i24] >> 5) | (jArr[i25] << 24)));
            int i26 = i2 + 25;
            at(bArr, i3, 22, (int) ((jArr[i25] >> 8) | (jArr[i26] << 21)));
            int i27 = i2 + 26;
            at(bArr, i3, 23, (int) ((jArr[i26] >> 11) | (jArr[i27] << 18)));
            int i28 = i2 + 27;
            at(bArr, i3, 24, (int) ((jArr[i27] >> 14) | (jArr[i28] << 15)));
            int i29 = i2 + 28;
            at(bArr, i3, 25, (int) ((jArr[i29] << 12) | (jArr[i28] >> 17)));
            int i30 = i2 + 29;
            at(bArr, i3, 26, (int) ((jArr[i29] >> 20) | (jArr[i30] << 9)));
            int i31 = i2 + 30;
            at(bArr, i3, 27, (int) ((jArr[i30] >> 23) | (jArr[i31] << 6)));
            at(bArr, i3, 28, (int) ((jArr[i31] >> 26) | (jArr[i2 + 31] << 3)));
            i2 += 32;
        }
        System.arraycopy(bArr2, i, bArr, 14848, 32);
    }

    static void encodeSignature(byte[] bArr, int i, byte[] bArr2, int i2, long[] jArr) {
        int i3 = 0;
        for (int i4 = 0; i4 < 640; i4 += 10) {
            int i5 = i3 + 1;
            at(bArr, i4, 0, (int) ((jArr[i3] & 1048575) | (jArr[i5] << 20)));
            int i6 = i3 + 3;
            at(bArr, i4, 1, (int) (((jArr[i5] >>> 12) & 255) | ((jArr[i3 + 2] & 1048575) << 8) | (jArr[i6] << 28)));
            int i7 = i3 + 4;
            at(bArr, i4, 2, (int) (((jArr[i6] >>> 4) & 65535) | (jArr[i7] << 16)));
            int i8 = i3 + 6;
            at(bArr, i4, 3, (int) (((jArr[i7] >>> 16) & 15) | ((jArr[i3 + 5] & 1048575) << 4) | (jArr[i8] << 24)));
            at(bArr, i4, 4, (int) (((jArr[i8] >>> 8) & 4095) | (jArr[i3 + 7] << 12)));
            int i9 = i3 + 9;
            at(bArr, i4, 5, (int) ((jArr[i3 + 8] & 1048575) | (jArr[i9] << 20)));
            int i10 = i3 + 11;
            at(bArr, i4, 6, (int) (((jArr[i9] >>> 12) & 255) | ((jArr[i3 + 10] & 1048575) << 8) | (jArr[i10] << 28)));
            int i11 = i3 + 12;
            at(bArr, i4, 7, (int) (((jArr[i10] >>> 4) & 65535) | (jArr[i11] << 16)));
            int i12 = i3 + 14;
            at(bArr, i4, 8, (int) (((jArr[i11] >>> 16) & 15) | ((1048575 & jArr[i3 + 13]) << 4) | (jArr[i12] << 24)));
            at(bArr, i4, 9, (int) (((jArr[i12] >>> 8) & 4095) | (jArr[i3 + 15] << 12)));
            i3 += 16;
        }
        System.arraycopy(bArr2, i2, bArr, i + 2560, 32);
    }

    static int generateKeyPair(byte[] bArr, byte[] bArr2, SecureRandom secureRandom) {
        int i;
        int i2;
        byte[] bArr3 = new byte[32];
        byte[] bArr4 = new byte[224];
        long[] jArr = new long[1024];
        long[] jArr2 = new long[PKIFailureInfo.certConfirmed];
        long[] jArr3 = new long[PKIFailureInfo.certConfirmed];
        long[] jArr4 = new long[PKIFailureInfo.certConfirmed];
        long[] jArr5 = new long[1024];
        secureRandom.nextBytes(bArr3);
        HashUtils.secureHashAlgorithmKECCAK128(bArr4, 0, 224, bArr3, 0, 32);
        int i3 = 0;
        int i4 = 0;
        while (true) {
            i = 4;
            if (i3 >= 4) {
                break;
            }
            do {
                i4++;
                i2 = i3 * 1024;
                Gaussian.sample_gauss_polly(i4, bArr4, i3 * 32, jArr2, i2);
            } while (checkPolynomial(jArr2, i2, 554));
            i3++;
        }
        while (true) {
            i4++;
            Gaussian.sample_gauss_polly(i4, bArr4, 128, jArr, 0);
            if (!checkPolynomial(jArr, 0, 554)) {
                break;
            }
            i = 4;
        }
        QTesla1PPolynomial.poly_uniform(jArr3, bArr4, CipherSuite.TLS_DH_RSA_WITH_AES_128_GCM_SHA256);
        QTesla1PPolynomial.poly_ntt(jArr5, jArr);
        int i5 = 0;
        while (i5 < i) {
            int i6 = i5 * 1024;
            QTesla1PPolynomial.poly_mul(jArr4, i6, jArr3, i6, jArr5);
            QTesla1PPolynomial.poly_add_correct(jArr4, i6, jArr4, i6, jArr2, i6);
            i5++;
            jArr4 = jArr4;
            jArr5 = jArr5;
            i = 4;
        }
        encodePublicKey(bArr, jArr4, bArr4, CipherSuite.TLS_DH_RSA_WITH_AES_128_GCM_SHA256);
        encodePrivateKey(bArr2, jArr, jArr2, bArr4, CipherSuite.TLS_DH_RSA_WITH_AES_128_GCM_SHA256);
        return 0;
    }

    static int generateSignature(byte[] bArr, byte[] bArr2, int i, int i2, byte[] bArr3, SecureRandom secureRandom) {
        int i3;
        long[] jArr;
        long[] jArr2;
        long[] jArr3;
        short[] sArr;
        int[] iArr;
        long[] jArr4;
        long[] jArr5;
        byte[] bArr4 = bArr3;
        byte[] bArr5 = new byte[32];
        byte[] bArr6 = new byte[32];
        byte[] bArr7 = new byte[128];
        int[] iArr2 = new int[25];
        short[] sArr2 = new short[25];
        long[] jArr6 = new long[1024];
        long[] jArr7 = new long[1024];
        long[] jArr8 = new long[PKIFailureInfo.certConfirmed];
        long[] jArr9 = new long[PKIFailureInfo.certConfirmed];
        long[] jArr10 = new long[PKIFailureInfo.certConfirmed];
        byte[] bArr8 = new byte[32];
        secureRandom.nextBytes(bArr8);
        System.arraycopy(bArr8, 0, bArr7, 32, 32);
        System.arraycopy(bArr4, 5152, bArr7, 0, 32);
        long[] jArr11 = jArr10;
        long[] jArr12 = jArr8;
        long[] jArr13 = new long[1024];
        long[] jArr14 = new long[1024];
        HashUtils.secureHashAlgorithmKECCAK128(bArr7, 64, 64, bArr2, 0, i2);
        HashUtils.secureHashAlgorithmKECCAK128(bArr6, 0, 32, bArr7, 0, 128);
        QTesla1PPolynomial.poly_uniform(jArr11, bArr4, 5120);
        int i4 = 0;
        boolean z = false;
        while (true) {
            i4++;
            sample_y(jArr6, bArr6, 0, i4);
            QTesla1PPolynomial.poly_ntt(jArr7, jArr6);
            int i5 = 0;
            while (true) {
                i3 = 4;
                if (i5 >= 4) {
                    break;
                }
                int i6 = i5 * 1024;
                QTesla1PPolynomial.poly_mul(jArr12, i6, jArr11, i6, jArr7);
                i5++;
            }
            hashFunction(bArr5, 0, jArr12, bArr7, 64);
            encodeC(iArr2, sArr2, bArr5, 0);
            QTesla1PPolynomial.sparse_mul8(jArr14, bArr4, iArr2, sArr2);
            long[] jArr15 = jArr13;
            QTesla1PPolynomial.poly_add(jArr15, jArr6, jArr14);
            if (testRejection(jArr15)) {
                jArr13 = jArr15;
            } else {
                boolean z2 = z;
                int i7 = 0;
                while (true) {
                    if (i7 >= i3) {
                        jArr = jArr11;
                        jArr2 = jArr7;
                        jArr3 = jArr6;
                        sArr = sArr2;
                        iArr = iArr2;
                        jArr4 = jArr15;
                        jArr5 = jArr14;
                        break;
                    }
                    int i8 = i7 * 1024;
                    i7++;
                    jArr = jArr11;
                    jArr4 = jArr15;
                    jArr5 = jArr14;
                    jArr2 = jArr7;
                    jArr3 = jArr6;
                    sArr = sArr2;
                    iArr = iArr2;
                    QTesla1PPolynomial.sparse_mul8(jArr9, i8, bArr3, i7 * 1024, iArr2, sArr);
                    QTesla1PPolynomial.poly_sub(jArr12, i8, jArr12, i8, jArr9, i8);
                    z2 = test_correctness(jArr12, i8);
                    if (z2) {
                        break;
                    }
                    sArr2 = sArr;
                    jArr14 = jArr5;
                    jArr11 = jArr;
                    jArr7 = jArr2;
                    jArr6 = jArr3;
                    iArr2 = iArr;
                    i3 = 4;
                    jArr15 = jArr4;
                }
                z = z2;
                if (z) {
                    jArr13 = jArr4;
                    sArr2 = sArr;
                    jArr14 = jArr5;
                    jArr11 = jArr;
                    jArr7 = jArr2;
                    jArr6 = jArr3;
                    iArr2 = iArr;
                    bArr4 = bArr3;
                } else {
                    encodeSignature(bArr, 0, bArr5, 0, jArr4);
                    return 0;
                }
            }
            jArr12 = jArr12;
        }
    }

    private static void hashFunction(byte[] bArr, int i, long[] jArr, byte[] bArr2, int i2) {
        byte[] bArr3 = new byte[4160];
        for (int i3 = 0; i3 < 4; i3++) {
            int i4 = i3 * 1024;
            int i5 = 0;
            while (i5 < 1024) {
                int i6 = (int) jArr[i4];
                int i7 = (171788288 - i6) >> 31;
                int i8 = (i6 & (~i7)) | ((i6 - PARAM_Q) & i7);
                int i9 = 4194303 & i8;
                int i10 = (PKIFailureInfo.badSenderNonce - i9) >> 31;
                bArr3[i4] = (byte) ((i8 - ((i9 & (~i10)) | ((i9 - 4194304) & i10))) >> 22);
                i5++;
                i4++;
            }
        }
        System.arraycopy(bArr2, i2, bArr3, PKIFailureInfo.certConfirmed, 64);
        HashUtils.secureHashAlgorithmKECCAK128(bArr, i, 32, bArr3, 0, 4160);
    }

    static int lE24BitToInt(byte[] bArr, int i) {
        int i2 = i + 1;
        return ((bArr[i2 + 1] & 255) << Tnaf.POW_2_WIDTH) | (bArr[i] & 255) | ((bArr[i2] & 255) << 8);
    }

    static boolean memoryEqual(byte[] bArr, int i, byte[] bArr2, int i2, int i3) {
        if (i + i3 > bArr.length || i2 + i3 > bArr2.length) {
            return false;
        }
        for (int i4 = 0; i4 < i3; i4++) {
            if (bArr[i + i4] != bArr2[i2 + i4]) {
                return false;
            }
        }
        return true;
    }

    static void sample_y(long[] jArr, byte[] bArr, int i, int i2) {
        int i3 = BPLUS1BYTES;
        byte[] bArr2 = new byte[((i3 * 1024) + 1)];
        short s = (short) (i2 << 8);
        int i4 = i3 * 1024;
        HashUtils.customizableSecureHashAlgorithmKECCAK128Simple(bArr2, 0, i4, s, bArr, i, 32);
        short s2 = (short) (s + 1);
        int i5 = 0;
        int i6 = 0;
        int i7 = 1024;
        while (i6 < 1024) {
            if (i5 >= i7 * i3) {
                int i8 = NBLOCKS_SHAKE;
                HashUtils.customizableSecureHashAlgorithmKECCAK128Simple(bArr2, 0, i4, s2, bArr, i, 32);
                i5 = 0;
                i7 = i8;
                s2 = (short) (s2 + 1);
            }
            jArr[i6] = (long) (lE24BitToInt(bArr2, i5) & 1048575);
            jArr[i6] = jArr[i6] - 524287;
            if (jArr[i6] != 524288) {
                i6++;
            }
            i5 += i3;
        }
    }

    private static boolean testRejection(long[] jArr) {
        int i = 0;
        for (int i2 = 0; i2 < 1024; i2++) {
            i = (int) (((long) i) | (523733 - absolute(jArr[i2])));
        }
        return (i >>> 31) > 0;
    }

    private static boolean testZ(long[] jArr) {
        for (int i = 0; i < 1024; i++) {
            if (jArr[i] < -523733 || jArr[i] > 523733) {
                return true;
            }
        }
        return false;
    }

    static boolean test_correctness(long[] jArr, int i) {
        for (int i2 = 0; i2 < 1024; i2++) {
            int i3 = i + i2;
            int i4 = ((int) (171788288 - jArr[i3])) >> 31;
            int i5 = (int) ((jArr[i3] & ((long) (~i4))) | ((jArr[i3] - 343576577) & ((long) i4)));
            if ((((~(absolute(i5 - ((((PKIFailureInfo.badSenderNonce + i5) - 1) >> 22) << 22)) - 2096598)) >>> 31) | ((~(absolute(i5) - 171787734)) >>> 31)) == 1) {
                return true;
            }
        }
        return false;
    }

    static int verifying(byte[] bArr, byte[] bArr2, int i, int i2, byte[] bArr3) {
        byte[] bArr4 = new byte[32];
        byte[] bArr5 = new byte[32];
        byte[] bArr6 = new byte[32];
        byte[] bArr7 = new byte[64];
        int[] iArr = new int[25];
        short[] sArr = new short[25];
        int[] iArr2 = new int[PKIFailureInfo.certConfirmed];
        long[] jArr = new long[PKIFailureInfo.certConfirmed];
        long[] jArr2 = new long[PKIFailureInfo.certConfirmed];
        long[] jArr3 = new long[PKIFailureInfo.certConfirmed];
        long[] jArr4 = new long[1024];
        long[] jArr5 = new long[1024];
        if (i2 < CRYPTO_BYTES) {
            return -1;
        }
        decodeSignature(bArr4, jArr4, bArr2, i);
        if (testZ(jArr4)) {
            return -2;
        }
        boolean z = false;
        decodePublicKey(iArr2, bArr6, 0, bArr3);
        QTesla1PPolynomial.poly_uniform(jArr2, bArr6, 0);
        encodeC(iArr, sArr, bArr4, 0);
        QTesla1PPolynomial.poly_ntt(jArr5, jArr4);
        int i3 = 0;
        while (i3 < 4) {
            int i4 = i3 * 1024;
            QTesla1PPolynomial.sparse_mul32(jArr3, i4, iArr2, i4, iArr, sArr);
            QTesla1PPolynomial.poly_mul(jArr, i4, jArr2, i4, jArr5);
            QTesla1PPolynomial.poly_sub(jArr, i4, jArr, i4, jArr3, i4);
            i3++;
            jArr5 = jArr5;
            jArr2 = jArr2;
            jArr = jArr;
            jArr3 = jArr3;
            z = false;
        }
        HashUtils.secureHashAlgorithmKECCAK128(bArr7, 0, 64, bArr, 0, bArr.length);
        hashFunction(bArr5, 0, jArr, bArr7, 0);
        return !memoryEqual(bArr4, 0, bArr5, 0, 32) ? -3 : 0;
    }
}
